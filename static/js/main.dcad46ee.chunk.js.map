{"version":3,"sources":["components/login/Login.js","App.js","serviceWorker.js","index.js"],"names":["LoginContainer","state","email","name","sl_token","posts","undefined","from_name","handleSubmit","bind","event","preventDefault","formdata","FormData","currentTarget","append","this","getOptions","method","redirect","fetch","body","then","response","json","result","console","log","data","setState","catch","error","authors","map","post","sort","join","dates","created_time","toLocaleString","id","title","onSubmit","type","placeholder","value","onChange","target","React","Component","Posts","className","key","Post","from_id","message","Date","LoginHeader","props","FormInput","FormButton","Login","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dcad46ee.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Login.css\";\n\nconst Login = (props) => <LoginContainer />;\n\nclass LoginContainer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: \"\",\n      name: \"\",\n      sl_token: \"\",\n      posts: undefined,\n      from_name: [],\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    var formdata = new FormData(event.currentTarget);\n    formdata.append(\"client_id\", \"ju16a6m81mhid5ue1z3v2g0uh\");\n    formdata.append(\"email\", this.state.email);\n    formdata.append(\"name\", this.state.name);\n\n    var requestOptions = {\n      method: \"POST\",\n      body: formdata,\n      redirect: \"follow\",\n    };\n\n    var getOptions = {\n      method: \"GET\",\n      redirect: \"follow\",\n    };\n\n    fetch(\"https://api.supermetrics.com/assignment/register?\", requestOptions)\n      .then((response) => response.json())\n      .then((result) => {\n        console.log(\"response\", result);\n        console.log(\"token\", result.data.sl_token);\n        this.setState({ sl_token: result.data.sl_token });\n        return fetch(\n          `https://api.supermetrics.com/assignment/posts?sl_token=${this.state.sl_token}`,\n          getOptions\n        );\n      })\n      .then((response) => response.json())\n      .then((result) => {\n        this.setState({\n          posts: result.data.posts,\n          from_name: result.data.from_name,\n        });\n      })\n      .catch((error) => console.log(\"error\", error));\n    return this.state.posts;\n  }\n\n  render() {\n    const { posts, email, name } = this.state;\n\n    if (posts) {\n      const authors = this.state.posts\n        .map((post) => post.from_name)\n        .sort()\n        .join(\", \");\n      console.log(`Names sorted by alphabet: ${authors}`);\n      const dates = this.state.posts\n        .map((post) => post.created_time)\n        .sort()\n        .join(\", \");\n      console.log(`Dates sorted by creation time: ${dates.toLocaleString()}`);\n      return <Posts posts={posts} />;\n    } else\n      return (\n        <div id=\"Container\">\n          <LoginHeader title=\"Login\" />\n          <div id=\"loginFormContainer\">\n            <form id=\"loginForm\" onSubmit={this.handleSubmit}>\n              <FormInput\n                type=\"text\"\n                placeholder=\"email\"\n                value={email}\n                onChange={(event) =>\n                  this.setState({ email: event.target.value })\n                }\n              />\n              <FormInput\n                type=\"text\"\n                placeholder=\"name\"\n                value={name}\n                onChange={(event) =>\n                  this.setState({ name: event.target.value })\n                }\n              />\n              <FormButton title=\"Send\" />\n            </form>\n          </div>\n        </div>\n      );\n  }\n}\n\nconst Posts = ({ posts }) => (\n  <div className=\"large-container\">\n    <div className=\"posts\">\n      {posts.map((post) => (\n        <Post key={post.id} {...post} />\n      ))}\n    </div>\n  </div>\n);\n\nconst Post = ({ from_id, created_time, message, from_name }) => (\n  <div className=\"post\">\n    <div key={from_id} className=\"name_date_post\">\n      <div className=\"name_date_post\">\n        <section>\n          <h4 className=\"names_id\">{from_name}</h4>\n        </section>\n      </div>\n      <div className=\"post_instance\">\n        <h4>{new Date(created_time).toLocaleString()}</h4>\n        <p>{message}</p>\n      </div>\n    </div>\n  </div>\n);\n\nconst LoginHeader = (props) => (\n  <div className=\"loginHeader\">\n    <div id=\"loginHeaderTitle\">{props.title}</div>\n  </div>\n);\n\nconst FormInput = (props) => (\n  <div className=\"LoginInput\">\n    <input\n      type={props.type}\n      placeholder={props.placeholder}\n      onChange={props.onChange}\n    />\n  </div>\n);\n\nconst FormButton = (props) => (\n  <div className=\"LoginButton\">\n    <button type=\"submit\">{props.title}</button>\n  </div>\n);\n\nexport default Login;\n","import React from \"react\";\nimport \"./App.css\";\nimport Login from \"./components/login/Login\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main>\n        <Login />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}