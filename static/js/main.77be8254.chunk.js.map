{"version":3,"sources":["components/login/Login.js","App.js","serviceWorker.js","index.js"],"names":["LoginContainer","state","email","name","sl_token","posts","undefined","from_id","from_name","created_time","message","handleSubmit","bind","event","preventDefault","console","log","formdata","FormData","currentTarget","append","this","getOptions","method","redirect","fetch","body","then","response","json","result","data","setState","catch","error","id","title","onSubmit","type","placeholder","value","onChange","target","React","Component","Posts","props","className","date","Date","toLocaleString","weekday","month","day","year","hour","minute","LoginHeader","FormInput","FormButton","Login","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.77be8254.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Login.css\";\n\nconst Login = (props) => <LoginContainer />;\n\nclass LoginContainer extends React.Component {\n  constructor() {\n    super();\n    this.state = { email: \"\", name: \"\", sl_token: \"\", posts: undefined, from_id: [], from_name: [], created_time: [], message: [] };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    console.log(\"the form is submitted!\");\n\n    var formdata = new FormData(event.currentTarget);\n    formdata.append(\"client_id\", \"ju16a6m81mhid5ue1z3v2g0uh\");\n    formdata.append(\"email\", this.state.email);\n    formdata.append(\"name\", this.state.name);\n\n    var requestOptions = {\n      method: \"POST\",\n      body: formdata,\n      redirect: \"follow\",\n    };\n\n    var getOptions = {\n      method: \"GET\",\n      redirect: \"follow\",\n    };\n\n    fetch(\"https://api.supermetrics.com/assignment/register?\", requestOptions)\n      .then((response) => response.json())\n      .then((result) => {\n        console.log(\"response\", result);\n        console.log(\"token\", result.data.sl_token);\n        this.setState({ sl_token: result.data.sl_token });\n        fetch(\n          `https://api.supermetrics.com/assignment/posts?sl_token=${this.state.sl_token}`, getOptions)\n          .then((response) => response.json())\n          .then((result) => {\n            this.setState({\n              from_name: result.data.from_name,\n              from_id: result.data.from_id,\n              message: result.data.message,\n              created_time: result.data.created_time,\n              posts: result.data,\n            });    \n            console.log(result);\n          })\n      })\n     \n      .catch((error) => console.log(\"error\", error));\n\n  }\n\n  render() {\n    const { email, name, from_id, created_time, message, from_name, posts } = this.state;\n\n    if (posts) return <Posts posts={posts} from_name={from_name} from_id={from_id} message={message} created_time={created_time} />;\n    else\n      return (\n        <div id=\"Container\">\n          <LoginHeader title=\"Login\" />\n          <div id=\"loginFormContainer\">\n            <form id=\"loginForm\" onSubmit={this.handleSubmit}>\n              <FormInput\n                type=\"text\"\n                placeholder=\"email\"\n                value={email}\n                onChange={(event) =>\n                  this.setState({ email: event.target.value })\n                }\n              />\n              <FormInput\n                type=\"text\"\n                placeholder=\"name\"\n                value={name}\n                onChange={(event) =>\n                  this.setState({ name: event.target.value })\n                }\n              />\n              <FormButton title=\"Send\" />\n            </form>\n          </div>\n        </div>\n      );\n  }\n}\n\n/* function Posts (props) {\n  const from_name = props.from_name;\n  const from_id = props.from_id;\n  const created_time = props.created_time;\n  const message = props.message;\n\n  const postsName = from_name.map((number) =>    <li>{number}</li>  );\n  const postsId = from_id.map((number) =>    <li>{number}</li>  );\n  const postsDate = created_time.map((number) =>    <li>{number}</li>  );\n  const postsMessage = message.map((number) =>    <li>{number}</li>  );\n    return (\n      <div>\n        <ul>{postsName}, {postsId}</ul> \n        <ul>{postsDate}, {postsMessage}</ul> \n      </div>\n     );\n} */\n\nconst Posts = (props) => (\n  <div id=\"Posts\">\n    <div id=\"postsContainer\">\n      <h1 id=\"postsHeaderTitle\">Users</h1>\n      <ul className=\"posts-list\">\n        <li>{props.from_name}, {props.from_id}</li>\n      </ul>\n    </div>\n    <div id=\"postsContainer\">\n      <h1 id=\"postsHeaderTitle\">Posts</h1>\n      <ul className=\"posts-list\">\n        <li>\n          { formatDate( props.created_time ) }\n          <br />\n          {props.message}\n        </li>\n      </ul>\n    </div>\n  </div>\n);\n\nconst LoginHeader = (props) => (\n  <div className=\"loginHeader\">\n    <div id=\"loginHeaderTitle\">{props.title}</div>\n  </div>\n);\n\nconst FormInput = (props) => (\n  <div className=\"LoginInput\">\n    <input\n      type={props.type}\n      placeholder={props.placeholder}\n      onChange={props.onChange}\n    />\n  </div>\n);\n\nconst FormButton = (props) => (\n  <div className=\"LoginButton\">\n    <button type=\"submit\">{props.title}</button>\n  </div>\n);\n\nfunction formatDate(date) {\n  const buildDate = new Date(date);\n\n  return buildDate.toLocaleString(\"en-US\", {\n    weekday: \"short\",\n    month: \"long\",\n    day: \"2-digit\",\n    year: \"numeric\",\n    hour: '2-digit',\n    minute:'2-digit',\n  });\n}\n\nfunction sortByTime(a, b) {\n  var keyA = new Date(a),\n    keyB = new Date(b);\n  if (keyA < keyB) return 1;\n  if (keyA > keyB) return -1; \n  return 0;\n}\n\nexport default Login;\n","import React from 'react';\nimport './App.css';\nimport Login from './components/login/Login';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <main>\n        {/* <img className=\"App-logo\" alt=\"logo\" src=\"../interface.svg\"/> */}\n        <Login />\n      </main>\n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}